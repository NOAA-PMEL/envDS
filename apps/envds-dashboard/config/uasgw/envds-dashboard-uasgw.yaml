# apiVersion: v1
# kind: PersistentVolume
# metadata:
#   name: envds-dashboard-uasgw-pv-volume
#   namespace: envds
#   labels:
#     type: local
# spec:
#   storageClassName: local-path
#   capacity:
#     storage: 10Gi
#   accessModes:
#     - ReadWriteOnce
#   hostPath:
#     # path: "/data/envds/data/registrar/base"
#     path: "/data/envds/registrar/base"
# ---
# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: envds-dashboard-uasgw-pv-claim
#   namespace: envds
# spec:
#   storageClassName: local-path
#   accessModes:
#     - ReadWriteOnce
#   resources:
#     requests:
#       storage: 10Gi
# ---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: envds-dashboard-uasgw
  namespace: envds
  labels:
    app: envds-dashboard-uasgw
spec:
  selector:
    matchLabels:
      app: envds-dashboard-uasgw
  template:
    metadata:
      labels:
        app: envds-dashboard-uasgw
    spec:
      containers:
      - name: envds-dashboard-uasgw
        image: envds-registry-uasgw:5000/envds/envds-dashboard:1.0.4
        imagePullPolicy: "Always"
        env:
          - name: ENVDS_ENV_ID
            value: uasgw
          - name: REDIS_OM_URL
            value: redis://redis.default
          - name: LOG_LEVEL
            value: DEBUG
          # - name: REDIS_OM_URL
          #   value: redis://redis.default
        resources:
          requests:
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "500m"
        ports:
        - name: http
          containerPort: 9080
          protocol: TCP
        # volumeMounts:
        #   - name: envds-dashboard-uasgw-pv-storage
        #     mountPath: /data
      # volumes:
      #   - name: envds-dashboard-uasgw-pv-storage
      #     persistentVolumeClaim:
      #       claimName: envds-dashboard-uasgw-pv-claim
---
apiVersion: v1
kind: Service
metadata:
  name: envds-dashboard-uasgw
  namespace: envds
  labels:
    app: envds-dashboard-uasgw
spec:
  selector:
    app: envds-dashboard-uasgw
  ports:
  - name: http
    protocol: TCP
    port: 9080
    targetPort: 9080
  # - name: https
  #   port: 8883
  #   targetPort: 8883
  # type: LoadBalancer
  type: ClusterIP
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: envds-dashboard-stripprefix
  namespace: envds
  labels:
    app: envds
spec:
  stripPrefix:
    prefixes:
      - /envds/dashboard
      # - /ws/envds/dashboard
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: envds-dashboard-ingress
  namespace: envds
  # labels:
  #   app: envds
  annotations:
    ingress.kubernetes.io/ssl-redirect: "false"
    traefik.ingress.kubernetes.io/router.middlewares:
      envds-envds-dashboard-stripprefix@kubernetescrd
      # default-erddap-rewrite@kubernetescrd
spec:
  rules:
  - http:
      paths:
      # - path: /erddap
      - path: /envds/dashboard
        pathType: Prefix
        # pathType: Exact
        backend:
          service:
            name: envds-dashboard-uasgw
            port:
              number: 9080
      # - path: /ws/envds/dashboard
      #   pathType: Prefix
      #   # pathType: Exact
      #   backend:
      #     service:
      #       name: envds-dashboard-uasgw
      #       port:
      #         number: 9080
# # ---
# # apiVersion: networking.k8s.io/v1
# # kind: Ingress
# # metadata:
# #   name: mosquitto-ingress
# #   namespace: envds-uasgw
# #   annotations:
# #     kubernetes.io/ingress.class: nginx
# #     nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
# # spec:
# #   rules:
# #   - host: mosquitto.local
# #     http:
# #       paths:
# #         - pathType: Prefix
# #           path: "/"
# #           backend:
# #             service:
# #               name: mosquitto
# #               port: 
# #                 number: 9001
# # ---
# # apiVersion: traefik.containo.us/v1alpha1
# # kind: Middleware
# # metadata:
# #   name: envds-stripprefix
# #   namespace: envds
# #   labels:
# #     app: envds
# # spec:
# #   stripPrefix:
# #     prefixes:
# #       - /envds/base
# ---
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: envds-ingress
#   namespace: envds
#   labels:
#     app: envds
#   annotations:
#     ingress.kubernetes.io/ssl-redirect: "false"
#     # traefik.ingress.kubernetes.io/router.middlewares:
#     #   envds-envds-stripprefix@kubernetescrd
# spec:
#   rules:
#   - http:
#       paths:
#       - path: /envds/base
#         pathType: Prefix
#         backend:
#           service:
#             name: envds
#             port:
#               number: 9080
# # ---
# # apiVersion: networking.k8s.io/v1
# # kind: Ingress
# # metadata:
# #   annotations:
# #     kubernetes.io/ingress.class: nginx
# #     nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
# #     nginx.ingress.kubernetes.io/rewrite-target: /$2
# #     # nginx.ingress.kubernetes.io/rewrite-target: /
# #   name: envds-ingress
# #   namespace: envds
# # spec:
# #   rules:
# #   - http:
# #       paths:
# #         - path: /envds(/|$)(.*)
# #           pathType: Prefix
# #           backend:
# #             service:
# #               name: envds
# #               port: 
# #                 number: 9080
# #         # path: /envds(/|$)(.*)
# #         #   service: 
# #         #   serviceName: http-svc
# #         #   servicePort: 9080
